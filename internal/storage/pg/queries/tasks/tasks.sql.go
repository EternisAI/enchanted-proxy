// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tasks.sql

package tasks

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (user_id, chat_id, name, content, cron, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, NOW(), NOW())
RETURNING id, user_id, chat_id, name, content, cron, created_at, updated_at
`

type CreateTaskParams struct {
	UserID  string `json:"userId"`
	ChatID  string `json:"chatId"`
	Name    string `json:"name"`
	Content string `json:"content"`
	Cron    string `json:"cron"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.UserID,
		arg.ChatID,
		arg.Name,
		arg.Content,
		arg.Cron,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatID,
		&i.Name,
		&i.Content,
		&i.Cron,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteTaskByIDAndChatID = `-- name: DeleteTaskByIDAndChatID :exec
DELETE FROM tasks
WHERE id = $1 AND chat_id = $2
`

type DeleteTaskByIDAndChatIDParams struct {
	ID     string `json:"id"`
	ChatID string `json:"chatId"`
}

func (q *Queries) DeleteTaskByIDAndChatID(ctx context.Context, arg DeleteTaskByIDAndChatIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaskByIDAndChatID, arg.ID, arg.ChatID)
	return err
}

const deleteTaskByIDAndUserID = `-- name: DeleteTaskByIDAndUserID :exec
DELETE FROM tasks
WHERE id = $1 AND user_id = $2
`

type DeleteTaskByIDAndUserIDParams struct {
	ID     string `json:"id"`
	UserID string `json:"userId"`
}

func (q *Queries) DeleteTaskByIDAndUserID(ctx context.Context, arg DeleteTaskByIDAndUserIDParams) error {
	_, err := q.db.ExecContext(ctx, deleteTaskByIDAndUserID, arg.ID, arg.UserID)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, user_id, chat_id, name, content, cron, created_at, updated_at FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatID,
		&i.Name,
		&i.Content,
		&i.Cron,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByChatID = `-- name: GetTasksByChatID :many
SELECT id, user_id, chat_id, name, content, cron, created_at, updated_at FROM tasks
WHERE chat_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTasksByChatID(ctx context.Context, chatID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatID,
			&i.Name,
			&i.Content,
			&i.Cron,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByUserID = `-- name: GetTasksByUserID :many
SELECT id, user_id, chat_id, name, content, cron, created_at, updated_at FROM tasks
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTasksByUserID(ctx context.Context, userID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatID,
			&i.Name,
			&i.Content,
			&i.Cron,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET name = $2, content = $3, cron = $4, updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, chat_id, name, content, cron, created_at, updated_at
`

type UpdateTaskParams struct {
	ID      string `json:"id"`
	Name    string `json:"name"`
	Content string `json:"content"`
	Cron    string `json:"cron"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Name,
		arg.Content,
		arg.Cron,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChatID,
		&i.Name,
		&i.Content,
		&i.Cron,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
