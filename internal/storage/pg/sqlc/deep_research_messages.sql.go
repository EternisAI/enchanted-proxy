// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: deep_research_messages.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"
)

const addDeepResearchMessage = `-- name: AddDeepResearchMessage :exec
INSERT INTO deep_research_messages (id, user_id, chat_id, session_id, message, message_type, sent, created_at, sent_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type AddDeepResearchMessageParams struct {
	ID          string       `json:"id"`
	UserID      string       `json:"userId"`
	ChatID      string       `json:"chatId"`
	SessionID   string       `json:"sessionId"`
	Message     string       `json:"message"`
	MessageType string       `json:"messageType"`
	Sent        bool         `json:"sent"`
	CreatedAt   time.Time    `json:"createdAt"`
	SentAt      sql.NullTime `json:"sentAt"`
}

func (q *Queries) AddDeepResearchMessage(ctx context.Context, arg AddDeepResearchMessageParams) error {
	_, err := q.db.ExecContext(ctx, addDeepResearchMessage,
		arg.ID,
		arg.UserID,
		arg.ChatID,
		arg.SessionID,
		arg.Message,
		arg.MessageType,
		arg.Sent,
		arg.CreatedAt,
		arg.SentAt,
	)
	return err
}

const deleteSessionMessages = `-- name: DeleteSessionMessages :exec
DELETE FROM deep_research_messages
WHERE session_id = $1
`

func (q *Queries) DeleteSessionMessages(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionMessages, sessionID)
	return err
}

const getSessionMessageCount = `-- name: GetSessionMessageCount :one
SELECT COUNT(*) as total_messages
FROM deep_research_messages
WHERE session_id = $1
`

func (q *Queries) GetSessionMessageCount(ctx context.Context, sessionID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getSessionMessageCount, sessionID)
	var total_messages int64
	err := row.Scan(&total_messages)
	return total_messages, err
}

const getSessionMessages = `-- name: GetSessionMessages :many
SELECT id, user_id, chat_id, session_id, message, message_type, sent, created_at, sent_at
FROM deep_research_messages
WHERE session_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetSessionMessages(ctx context.Context, sessionID string) ([]DeepResearchMessage, error) {
	rows, err := q.db.QueryContext(ctx, getSessionMessages, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeepResearchMessage{}
	for rows.Next() {
		var i DeepResearchMessage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatID,
			&i.SessionID,
			&i.Message,
			&i.MessageType,
			&i.Sent,
			&i.CreatedAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnsentMessageCount = `-- name: GetUnsentMessageCount :one
SELECT COUNT(*) as unsent_count
FROM deep_research_messages
WHERE session_id = $1 AND sent = FALSE
`

func (q *Queries) GetUnsentMessageCount(ctx context.Context, sessionID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUnsentMessageCount, sessionID)
	var unsent_count int64
	err := row.Scan(&unsent_count)
	return unsent_count, err
}

const getUnsentMessages = `-- name: GetUnsentMessages :many
SELECT id, user_id, chat_id, session_id, message, message_type, sent, created_at, sent_at
FROM deep_research_messages
WHERE session_id = $1 AND sent = FALSE
ORDER BY created_at ASC
`

func (q *Queries) GetUnsentMessages(ctx context.Context, sessionID string) ([]DeepResearchMessage, error) {
	rows, err := q.db.QueryContext(ctx, getUnsentMessages, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []DeepResearchMessage{}
	for rows.Next() {
		var i DeepResearchMessage
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChatID,
			&i.SessionID,
			&i.Message,
			&i.MessageType,
			&i.Sent,
			&i.CreatedAt,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAllMessagesAsSent = `-- name: MarkAllMessagesAsSent :exec
UPDATE deep_research_messages
SET sent = TRUE, sent_at = NOW()
WHERE session_id = $1 AND sent = FALSE
`

func (q *Queries) MarkAllMessagesAsSent(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, markAllMessagesAsSent, sessionID)
	return err
}

const markMessageAsSent = `-- name: MarkMessageAsSent :exec
UPDATE deep_research_messages
SET sent = TRUE, sent_at = NOW()
WHERE id = $1
`

func (q *Queries) MarkMessageAsSent(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, markMessageAsSent, id)
	return err
}
