// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: request_logs.sql

package pgdb

import (
	"context"
	"database/sql"
	"time"
)

const createRequestLog = `-- name: CreateRequestLog :exec
INSERT INTO request_logs (user_id, endpoint, model, provider, prompt_tokens, completion_tokens, total_tokens) 
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateRequestLogParams struct {
	UserID           string        `json:"userId"`
	Endpoint         string        `json:"endpoint"`
	Model            *string       `json:"model"`
	Provider         string        `json:"provider"`
	PromptTokens     sql.NullInt32 `json:"promptTokens"`
	CompletionTokens sql.NullInt32 `json:"completionTokens"`
	TotalTokens      sql.NullInt32 `json:"totalTokens"`
}

func (q *Queries) CreateRequestLog(ctx context.Context, arg CreateRequestLogParams) error {
	_, err := q.db.ExecContext(ctx, createRequestLog,
		arg.UserID,
		arg.Endpoint,
		arg.Model,
		arg.Provider,
		arg.PromptTokens,
		arg.CompletionTokens,
		arg.TotalTokens,
	)
	return err
}

const getUserLifetimeTokenUsage = `-- name: GetUserLifetimeTokenUsage :one
SELECT COALESCE(SUM(total_tokens), 0)::BIGINT as total_tokens
FROM request_logs
WHERE user_id = $1 AND total_tokens IS NOT NULL
`

func (q *Queries) GetUserLifetimeTokenUsage(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserLifetimeTokenUsage, userID)
	var total_tokens int64
	err := row.Scan(&total_tokens)
	return total_tokens, err
}

const getUserRequestCountInLastDay = `-- name: GetUserRequestCountInLastDay :one
SELECT COALESCE(SUM(request_count), 0)::BIGINT as total_requests
FROM user_request_counts_daily 
WHERE user_id = $1 
  AND day_bucket = DATE_TRUNC('day', NOW())
`

func (q *Queries) GetUserRequestCountInLastDay(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserRequestCountInLastDay, userID)
	var total_requests int64
	err := row.Scan(&total_requests)
	return total_requests, err
}

const getUserRequestCountInTimeWindow = `-- name: GetUserRequestCountInTimeWindow :one
SELECT COUNT(*) 
FROM request_logs 
WHERE user_id = $1 
  AND created_at >= $2
`

type GetUserRequestCountInTimeWindowParams struct {
	UserID    string    `json:"userId"`
	CreatedAt time.Time `json:"createdAt"`
}

func (q *Queries) GetUserRequestCountInTimeWindow(ctx context.Context, arg GetUserRequestCountInTimeWindowParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserRequestCountInTimeWindow, arg.UserID, arg.CreatedAt)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserRequestCountToday = `-- name: GetUserRequestCountToday :one
SELECT COUNT(*)
FROM request_logs
WHERE user_id = $1
  AND created_at >= DATE_TRUNC('day', NOW())
`

func (q *Queries) GetUserRequestCountToday(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserRequestCountToday, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserTokenUsageInLastDay = `-- name: GetUserTokenUsageInLastDay :one
SELECT COALESCE(SUM(total_tokens_used), 0)::BIGINT as total_tokens
FROM user_token_usage_daily 
WHERE user_id = $1 
  AND day_bucket = DATE_TRUNC('day', NOW())
`

func (q *Queries) GetUserTokenUsageInLastDay(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenUsageInLastDay, userID)
	var total_tokens int64
	err := row.Scan(&total_tokens)
	return total_tokens, err
}

const getUserTokenUsageInTimeWindow = `-- name: GetUserTokenUsageInTimeWindow :one
SELECT COALESCE(SUM(total_tokens_used), 0)::BIGINT as total_tokens
FROM user_token_usage_daily 
WHERE user_id = $1 
  AND day_bucket >= $2
`

type GetUserTokenUsageInTimeWindowParams struct {
	UserID    string    `json:"userId"`
	DayBucket time.Time `json:"dayBucket"`
}

func (q *Queries) GetUserTokenUsageInTimeWindow(ctx context.Context, arg GetUserTokenUsageInTimeWindowParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenUsageInTimeWindow, arg.UserID, arg.DayBucket)
	var total_tokens int64
	err := row.Scan(&total_tokens)
	return total_tokens, err
}

const getUserTokenUsageToday = `-- name: GetUserTokenUsageToday :one
SELECT COALESCE(SUM(total_tokens), 0)::BIGINT as total_tokens
FROM request_logs
WHERE user_id = $1 AND total_tokens IS NOT NULL
  AND created_at >= DATE_TRUNC('day', NOW())
`

func (q *Queries) GetUserTokenUsageToday(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserTokenUsageToday, userID)
	var total_tokens int64
	err := row.Scan(&total_tokens)
	return total_tokens, err
}

const refreshUserRequestCountsView = `-- name: RefreshUserRequestCountsView :exec
REFRESH MATERIALIZED VIEW CONCURRENTLY user_request_counts_daily
`

func (q *Queries) RefreshUserRequestCountsView(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, refreshUserRequestCountsView)
	return err
}

const refreshUserTokenUsageView = `-- name: RefreshUserTokenUsageView :exec
REFRESH MATERIALIZED VIEW CONCURRENTLY user_token_usage_daily
`

func (q *Queries) RefreshUserTokenUsageView(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, refreshUserTokenUsageView)
	return err
}
