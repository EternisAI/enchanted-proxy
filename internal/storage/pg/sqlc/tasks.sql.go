// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tasks.sql

package pgdb

import (
	"context"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (task_id, user_id, chat_id, task_name, task_text, type, time, status, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW())
RETURNING task_id, user_id, chat_id, task_name, task_text, type, time, status, created_at, updated_at
`

type CreateTaskParams struct {
	TaskID   string `json:"taskId"`
	UserID   string `json:"userId"`
	ChatID   string `json:"chatId"`
	TaskName string `json:"taskName"`
	TaskText string `json:"taskText"`
	Type     string `json:"type"`
	Time     string `json:"time"`
	Status   string `json:"status"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.TaskID,
		arg.UserID,
		arg.ChatID,
		arg.TaskName,
		arg.TaskText,
		arg.Type,
		arg.Time,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.UserID,
		&i.ChatID,
		&i.TaskName,
		&i.TaskText,
		&i.Type,
		&i.Time,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE task_id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, taskID string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, taskID)
	return err
}

const getAllActiveTasks = `-- name: GetAllActiveTasks :many
SELECT task_id, user_id, chat_id, task_name, task_text, type, time, status, created_at, updated_at FROM tasks
WHERE status = 'active'
ORDER BY created_at DESC
`

func (q *Queries) GetAllActiveTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllActiveTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.UserID,
			&i.ChatID,
			&i.TaskName,
			&i.TaskText,
			&i.Type,
			&i.Time,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT task_id, user_id, chat_id, task_name, task_text, type, time, status, created_at, updated_at FROM tasks
WHERE task_id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, taskID string) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskByID, taskID)
	var i Task
	err := row.Scan(
		&i.TaskID,
		&i.UserID,
		&i.ChatID,
		&i.TaskName,
		&i.TaskText,
		&i.Type,
		&i.Time,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTasksByChatID = `-- name: GetTasksByChatID :many
SELECT task_id, user_id, chat_id, task_name, task_text, type, time, status, created_at, updated_at FROM tasks
WHERE chat_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTasksByChatID(ctx context.Context, chatID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByChatID, chatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.UserID,
			&i.ChatID,
			&i.TaskName,
			&i.TaskText,
			&i.Type,
			&i.Time,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTasksByUserID = `-- name: GetTasksByUserID :many
SELECT task_id, user_id, chat_id, task_name, task_text, type, time, status, created_at, updated_at FROM tasks
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTasksByUserID(ctx context.Context, userID string) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.TaskID,
			&i.UserID,
			&i.ChatID,
			&i.TaskName,
			&i.TaskText,
			&i.Type,
			&i.Time,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
UPDATE tasks
SET status = $2, updated_at = NOW()
WHERE task_id = $1
`

type UpdateTaskStatusParams struct {
	TaskID string `json:"taskId"`
	Status string `json:"status"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.TaskID, arg.Status)
	return err
}
