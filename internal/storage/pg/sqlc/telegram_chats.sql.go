// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: telegram_chats.sql

package pgdb

import (
	"context"
)

const createTelegramChat = `-- name: CreateTelegramChat :one
INSERT INTO telegram_chats (chat_id, chat_uuid)
VALUES ($1, $2)
ON CONFLICT (chat_id) DO UPDATE SET
    chat_uuid = EXCLUDED.chat_uuid,
    updated_at = NOW()
RETURNING id, chat_id, chat_uuid, created_at, updated_at
`

type CreateTelegramChatParams struct {
	ChatID   int64  `json:"chatId"`
	ChatUuid string `json:"chatUuid"`
}

func (q *Queries) CreateTelegramChat(ctx context.Context, arg CreateTelegramChatParams) (TelegramChat, error) {
	row := q.db.QueryRowContext(ctx, createTelegramChat, arg.ChatID, arg.ChatUuid)
	var i TelegramChat
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.ChatUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTelegramChat = `-- name: DeleteTelegramChat :exec
DELETE FROM telegram_chats
WHERE chat_id = $1
`

func (q *Queries) DeleteTelegramChat(ctx context.Context, chatID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTelegramChat, chatID)
	return err
}

const getTelegramChatByChatID = `-- name: GetTelegramChatByChatID :one
SELECT id, chat_id, chat_uuid, created_at, updated_at FROM telegram_chats
WHERE chat_id = $1
`

func (q *Queries) GetTelegramChatByChatID(ctx context.Context, chatID int64) (TelegramChat, error) {
	row := q.db.QueryRowContext(ctx, getTelegramChatByChatID, chatID)
	var i TelegramChat
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.ChatUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTelegramChatByChatUUID = `-- name: GetTelegramChatByChatUUID :one
SELECT id, chat_id, chat_uuid, created_at, updated_at FROM telegram_chats
WHERE chat_uuid = $1
`

func (q *Queries) GetTelegramChatByChatUUID(ctx context.Context, chatUuid string) (TelegramChat, error) {
	row := q.db.QueryRowContext(ctx, getTelegramChatByChatUUID, chatUuid)
	var i TelegramChat
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.ChatUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTelegramChats = `-- name: ListTelegramChats :many
SELECT id, chat_id, chat_uuid, created_at, updated_at FROM telegram_chats
ORDER BY created_at DESC
`

func (q *Queries) ListTelegramChats(ctx context.Context) ([]TelegramChat, error) {
	rows, err := q.db.QueryContext(ctx, listTelegramChats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TelegramChat{}
	for rows.Next() {
		var i TelegramChat
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.ChatUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
